{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":2965537,"sourceType":"datasetVersion","datasetId":1818188}],"dockerImageVersionId":30822,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/gorantlasravanthi/task-1?scriptVersionId=214115816\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input/titanic-dataset/Titanic-Dataset.csv'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2024-12-21T07:21:45.746975Z","iopub.execute_input":"2024-12-21T07:21:45.747349Z","iopub.status.idle":"2024-12-21T07:21:45.753364Z","shell.execute_reply.started":"2024-12-21T07:21:45.747321Z","shell.execute_reply":"2024-12-21T07:21:45.752206Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.metrics import classification_report, confusion_matrix\nfrom sklearn.model_selection import GridSearchCV\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load the Titanic dataset\ndf = pd.read_csv(\"/kaggle/input/titanic-dataset/Titanic-Dataset.csv\")\n\n# Basic Data Exploration\nprint(df.info())\nprint(df.describe())\n\n# Handling missing values\ndf['Age'].fillna(df['Age'].median(), inplace=True)\ndf['Embarked'].fillna(df['Embarked'].mode()[0], inplace=True)\n\n# Convert 'Sex' into numeric values (0 = Male, 1 = Female)\ndf['Sex'] = df['Sex'].map({'male': 0, 'female': 1})\n\n# Feature Selection\nX = df[['Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare']]\ny = df['Survived']\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n# Train a Random Forest classifier\nmodel = RandomForestClassifier(random_state=42)\nmodel.fit(X_train, y_train)\n\n# Predictions and Evaluation\ny_pred = model.predict(X_test)\n\n# Print classification metrics\nprint(classification_report(y_test, y_pred))\nprint(confusion_matrix(y_test, y_pred))\n\n# Hyperparameter Tuning using GridSearchCV\nparam_grid = {\n    'n_estimators': [100, 200],\n    'max_depth': [5, 10, 20],\n    'min_samples_split': [2, 5]\n}\n\ngrid_search = GridSearchCV(RandomForestClassifier(random_state=42), param_grid, cv=5)\ngrid_search.fit(X_train, y_train)\n\n# Best parameters from GridSearchCV\nprint(\"Best parameters: \", grid_search.best_params_)\n\n# Final model evaluation on test data\nbest_model = grid_search.best_estimator_\ny_pred_best = best_model.predict(X_test)\nprint(classification_report(y_test, y_pred_best))\n\n# Confusion Matrix\nsns.heatmap(confusion_matrix(y_test, y_pred_best), annot=True, fmt=\"d\", cmap=\"Blues\")\nplt.show()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-21T07:21:45.754929Z","iopub.execute_input":"2024-12-21T07:21:45.755287Z","iopub.status.idle":"2024-12-21T07:22:04.092476Z","shell.execute_reply.started":"2024-12-21T07:21:45.755245Z","shell.execute_reply":"2024-12-21T07:22:04.091005Z"}},"outputs":[],"execution_count":null}]}